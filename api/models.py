from sqlalchemy import Column, Integer, String, ForeignKey, Float, JSON, Boolean
from sqlalchemy.orm import relationship

from api.database import Base


class League(Base):
    __tablename__ = 'league'
    league_id = Column(Integer, primary_key=True, autoincrement=True)
    year = Column(String)
    league_name = Column(String)
    teams = relationship('Team', back_populates='league')

class Team(Base):
    __tablename__ = 'team'
    team_id = Column(Integer, primary_key=True, autoincrement=True)
    team_name = Column(String)
    league_id = Column(Integer, ForeignKey('league.league_id'))
    league = relationship('League', back_populates='teams')

class Stats(Base):
    __tablename__ = 'stats'
    stats_id = Column(Integer, primary_key=True, autoincrement=True)
    goals = Column(Integer)
    goals_in_first_period = Column(Integer)
    goals_in_second_period = Column(Integer)
    goals_in_third_period = Column(Integer)
    goals_in_overtime = Column(Integer)
    goals_in_boxplay = Column(Integer)
    goals_in_powerplay = Column(Integer)
    leading_goals = Column(Integer)
    equalizer_goals = Column(Integer)
    first_goal_of_match = Column(Integer)
    goals_against = Column(Integer)
    leading_goals_against = Column(Integer)
    equalizer_goals_against = Column(Integer)
    first_goal_of_match_against = Column(Integer)
    goals_in_first_period_against = Column(Integer)
    goals_in_second_period_against = Column(Integer)
    goals_in_third_period_against = Column(Integer)
    goals_in_overtime_against = Column(Integer)
    goals_against_in_boxplay = Column(Integer)
    goals_against_in_powerplay = Column(Integer)
    goals_not_in_boxplay = Column(Integer)
    boxplay = Column(Integer)
    powerplay = Column(Integer)
    boxplay_first_period = Column(Integer)
    boxplay_second_period = Column(Integer)
    boxplay_third_period = Column(Integer)
    boxplay_overtime = Column(Integer)
    powerplay_first_period = Column(Integer)
    powerplay_second_period = Column(Integer)
    powerplay_third_period = Column(Integer)
    powerplay_overtime = Column(Integer)
    games = Column(Integer)
    games_home = Column(Integer)
    games_away = Column(Integer)
    goals_home = Column(Integer)
    goals_away = Column(Integer)
    goals_against_home = Column(Integer)
    goals_against_away = Column(Integer)
    points = Column(Integer)
    home_points = Column(Integer)
    away_points = Column(Integer)
    wins = Column(Integer)
    over_time_wins = Column(Integer)
    losses = Column(Integer)
    over_time_losses = Column(Integer)
    draws = Column(Integer)
    points_against = Column(JSON)
    points_after_first_period = Column(Integer)
    points_after_second_period = Column(Integer)
    points_after_third_period = Column(Integer)
    points_after_55_min = Column(Integer)
    points_after_58_min = Column(Integer)
    points_after_59_min = Column(Integer)
    win_1 = Column(Integer)
    loss_1 = Column(Integer)
    points_max_difference_3 = Column(Integer)
    points_more_3_difference = Column(Integer)
    close_game_win = Column(Integer)
    close_game_loss = Column(Integer)
    close_game_overtime = Column(Integer)
    penalty_shot_goals = Column(Integer)
    penalty_shot_goals_against = Column(Integer)
    penalty_2 = Column(Integer)
    penalty_2and2 = Column(Integer)
    penalty_10 = Column(Integer)
    penalty_ms = Column(Integer)
    goals_per_game = Column(Float)
    goals_against_per_game = Column(Float)
    boxplay_per_game = Column(Float)
    powerplay_per_game = Column(Float)
    powerplay_efficiency = Column(Float)
    boxplay_efficiency = Column(Float)
    percent_goals_first_period = Column(Float)
    percent_goals_second_period = Column(Float)
    percent_goals_third_period = Column(Float)
    percent_goals_overtime = Column(Float)
    percent_goals_in_boxplay = Column(Float)
    percent_goals_in_powerplay = Column(Float)
    percent_goals_first_period_against = Column(Float)
    percent_goals_second_period_against = Column(Float)
    percent_goals_third_period_against = Column(Float)
    percent_goals_overtime_against = Column(Float)
    points_per_game = Column(Float)
    goal_difference = Column(Integer)
    goal_difference_per_game = Column(Float)
    scoring_ratio = Column(Float)
    is_playoffs = Column(Boolean)
    rank = Column(Integer)
    team_id = Column(Integer, ForeignKey('team.team_id'))
    team = relationship('Team')

